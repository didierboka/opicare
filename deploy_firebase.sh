#!/bin/bash
# by @didierboka < didier.boka@synelia.tech >

# Configuration
PROJECT_ID="opicare-2025"
IOS_APP_ID="1:822401793104:ios:eba36db1ef2d0f9015a555"
ANDROID_APP_ID="1:259776475722:android:bf29660ecb8ce82f2bacb3"
TESTER_GROUPS="testers-android"
# TESTER_GROUPS="didierboka.developer@gmail.com"
RELEASE_NOTES_FILE="release_notes.txt"
DEFAULT_RELEASE_NOTES="Build automatique - $(date '+%Y-%m-%d %H:%M')"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage
print_step() {
    echo -e "${BLUE}üì± $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Fonction de lecture des release notes
get_release_notes() {
    if [ -f "$RELEASE_NOTES_FILE" ]; then
        # V√©rifier que le fichier n'est pas vide
        if [ -s "$RELEASE_NOTES_FILE" ]; then
            print_success "Utilisation des release notes depuis: $RELEASE_NOTES_FILE"
            return 0
        else
            print_warning "Le fichier $RELEASE_NOTES_FILE est vide"
            return 1
        fi
    else
        print_warning "Fichier $RELEASE_NOTES_FILE non trouv√©"
        return 1
    fi
}

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    print_step "V√©rification des pr√©requis..."

    # V√©rifier Flutter
    if ! command -v fvm flutter &> /dev/null; then
        print_error "Flutter n'est pas install√© ou pas dans le PATH"
        exit 1
    fi

    # V√©rifier Firebase CLI
    if ! command -v firebase &> /dev/null; then
        print_error "Firebase CLI n'est pas install√©"
        echo "Installation: npm install -g firebase-tools"
        exit 1
    fi

    # V√©rifier l'authentification Firebase
    if ! firebase projects:list &> /dev/null; then
        print_error "Non authentifi√© sur Firebase"
        echo "Ex√©cutez: firebase login"
        exit 1
    fi

    print_success "Pr√©requis OK"
}

# Fonction de nettoyage et pr√©paration
prepare_build() {
    print_step "Pr√©paration du build..."

    fvm flutter clean
    fvm flutter pub get

    print_success "Pr√©paration termin√©e"
}

# Fonction de v√©rification IPA
verify_ipa() {
    local ipa_path="build/ios/ipa/technicien.ipa"

    print_step "V√©rification de l'IPA..."

    # V√©rifier l'existence du fichier
    if [ ! -f "$ipa_path" ]; then
        print_error "Fichier IPA non trouv√©: $ipa_path"
        return 1
    fi

    # V√©rifier la taille (doit √™tre > 1MB)
    local file_size=$(stat -f%z "$ipa_path" 2>/dev/null || stat -c%s "$ipa_path" 2>/dev/null)
    if [ "$file_size" -lt 1048576 ]; then
        print_error "IPA trop petit (${file_size} bytes), probablement corrompu"
        return 1
    fi

    # V√©rifier la signature (si codesign est disponible)
    if command -v codesign &> /dev/null; then
        if codesign -dv "$ipa_path" 2>&1 | grep -q "Signature="; then
            print_success "IPA correctement sign√©"
        else
            print_warning "Impossible de v√©rifier la signature IPA"
        fi
    fi

    # V√©rifier le contenu ZIP
    if command -v unzip &> /dev/null; then
        if unzip -t "$ipa_path" &> /dev/null; then
            print_success "Structure ZIP de l'IPA valide"
        else
            print_error "Structure ZIP de l'IPA corrompue"
            return 1
        fi
    fi

    print_success "IPA v√©rifi√© avec succ√®s"
    return 0
}

# Fonction de build iOS
build_ios() {
    print_step "Build iOS (IPA) avec profil AD-HOC..."

    # Build obligatoirement avec ad-hoc pour Firebase App Distribution
    if fvm flutter build ipa --release --export-method ad-hoc; then
        if verify_ipa; then
            IPA_SIZE=$(du -h build/ios/ipa/technicien.ipa | cut -f1)
            print_success "Build iOS r√©ussi avec AD-HOC (Taille: $IPA_SIZE)"

            # V√©rifier que c'est bien un build ad-hoc
            print_step "V√©rification du type de build..."
            if unzip -p build/ios/ipa/technicien.ipa Payload/technicien.app/embedded.mobileprovision 2>/dev/null | strings | grep -q "get-task-allow.*false"; then
                print_success "Profil AD-HOC confirm√©"
            else
                print_warning "Le profil pourrait ne pas √™tre AD-HOC"
            fi

            return 0
        else
            print_error "IPA g√©n√©r√© mais v√©rification √©chou√©e"
            return 1
        fi
    else
        print_error "Build iOS AD-HOC √©chou√©"
        print_error "V√©rifiez :"
        print_error "1. Profil de provisionnement AD-HOC configur√©"
        print_error "2. Certificat de distribution iOS valide"
        print_error "3. UDIDs des appareils testeurs ajout√©s au profil"
        return 1
    fi
}


# Fonction de build Android
build_android() {
    print_step "Build Android (APK)..."

    if fvm flutter build apk --release; then
        if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            APK_SIZE=$(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)
            print_success "Build Android r√©ussi (Taille: $APK_SIZE)"
            return 0
        else
            print_error "Fichier APK non trouv√© apr√®s le build"
            return 1
        fi
    else
        print_error "√âchec du build Android"
        return 1
    fi
}

# Fonction de d√©ploiement iOS
deploy_ios() {
    print_step "D√©ploiement iOS sur Firebase App Distribution..."

    if get_release_notes; then
        # Utiliser le fichier de release notes
        if firebase appdistribution:distribute build/ios/ipa/technicien.ipa \
            --app "$IOS_APP_ID" \
            --groups "$TESTER_GROUPS" \
            --release-notes-file "$RELEASE_NOTES_FILE" \
            --project "$PROJECT_ID"; then
            print_success "D√©ploiement iOS r√©ussi (avec release notes du fichier)"
            return 0
        else
            print_error "√âchec du d√©ploiement iOS"
            return 1
        fi
    else
        # Utiliser les release notes par d√©faut
        if firebase appdistribution:distribute build/ios/ipa/technicien.ipa \
            --app "$IOS_APP_ID" \
            --groups "$TESTER_GROUPS" \
            --release-notes "$DEFAULT_RELEASE_NOTES" \
            --project "$PROJECT_ID"; then
            print_success "D√©ploiement iOS r√©ussi (avec release notes par d√©faut)"
            return 0
        else
            print_error "√âchec du d√©ploiement iOS"
            return 1
        fi
    fi
}

# Fonction de d√©ploiement Android
deploy_android() {
    print_step "D√©ploiement Android sur Firebase App Distribution..."

    if get_release_notes; then
        # Utiliser le fichier de release notes
        if firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "$ANDROID_APP_ID" \
            --groups "$TESTER_GROUPS" \
            --release-notes-file "$RELEASE_NOTES_FILE" \
            --project "$PROJECT_ID"; then
            print_success "D√©ploiement Android r√©ussi (avec release notes du fichier)"
            return 0
        else
            print_error "√âchec du d√©ploiement Android"
            return 1
        fi
    else
        # Utiliser les release notes par d√©faut
        if firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "$ANDROID_APP_ID" \
            --groups "$TESTER_GROUPS" \
            --release-notes "$DEFAULT_RELEASE_NOTES" \
            --project "$PROJECT_ID"; then
            print_success "D√©ploiement Android r√©ussi (avec release notes par d√©faut)"
            return 0
        else
            print_error "√âchec du d√©ploiement Android"
            return 1
        fi
    fi
}

# Fonction principale
main() {
    echo -e "${BLUE}üöÄ D√©ploiement Firebase App Distribution${NC}"
    echo "=================================="

    # V√©rification des arguments
    PLATFORM="$1"
    if [ -z "$PLATFORM" ]; then
        echo "Usage: $0 [ios|android|both]"
        echo "Exemples:"
        echo "  $0 ios      - D√©ploie seulement iOS"
        echo "  $0 android  - D√©ploie seulement Android"
        echo "  $0 both     - D√©ploie iOS et Android"
        exit 1
    fi

    # V√©rifications pr√©liminaires
    check_prerequisites

    # S√©lection du projet Firebase
    firebase use "$PROJECT_ID"

    # Pr√©paration
    prepare_build

    # Variables de suivi
    IOS_SUCCESS=false
    ANDROID_SUCCESS=false

    # D√©ploiement selon la plateforme choisie
    case $PLATFORM in
        "ios")
            if build_ios && deploy_ios; then
                IOS_SUCCESS=true
            fi
            ;;
        "android")
            if build_android && deploy_android; then
                ANDROID_SUCCESS=true
            fi
            ;;
        "both")
            print_step "D√©ploiement des deux plateformes..."

            # Build iOS
            if build_ios; then
                if deploy_ios; then
                    IOS_SUCCESS=true
                fi
            fi

            # Build Android
            if build_android; then
                if deploy_android; then
                    ANDROID_SUCCESS=true
                fi
            fi
            ;;
        *)
            print_error "Plateforme non reconnue: $PLATFORM"
            echo "Utilisez: ios, android, ou both"
            exit 1
            ;;
    esac

    # R√©sum√© final
    echo ""
    echo -e "${BLUE}üìä R√©sum√© du d√©ploiement${NC}"
    echo "=========================="

    if [ "$PLATFORM" = "ios" ] || [ "$PLATFORM" = "both" ]; then
        if [ "$IOS_SUCCESS" = true ]; then
            print_success "iOS: D√©ploy√© avec succ√®s"
        else
            print_error "iOS: √âchec du d√©ploiement"
        fi
    fi

    if [ "$PLATFORM" = "android" ] || [ "$PLATFORM" = "both" ]; then
        if [ "$ANDROID_SUCCESS" = true ]; then
            print_success "Android: D√©ploy√© avec succ√®s"
        else
            print_error "Android: √âchec du d√©ploiement"
        fi
    fi

    # Code de sortie
    if [ "$PLATFORM" = "ios" ] && [ "$IOS_SUCCESS" = true ]; then
        exit 0
    elif [ "$PLATFORM" = "android" ] && [ "$ANDROID_SUCCESS" = true ]; then
        exit 0
    elif [ "$PLATFORM" = "both" ] && [ "$IOS_SUCCESS" = true ] && [ "$ANDROID_SUCCESS" = true ]; then
        exit 0
    else
        print_error "Au moins un d√©ploiement a √©chou√©"
        exit 1
    fi
}

# Point d'entr√©e
main "$@"